---
#Needs better permissions and dependincies external to pip

- name: pip installed
  apt:
    name=python-pip
    state=present
    update_cache=yes

- name: nginx installed
  apt:
    name=nginx
    state=present
    update_cache=yes

- name: supervisor installed
  apt:
    name=supervisor
    state=present

- name: group set up
  group:
    name=webapps
    state=present

- name: user set up
  user:
    name=webadmin
    state=present
    group=webapps
#
#- name: ensure github is a known host
#  action: sshknownhosts host=github.com state=present

- name: add id_rsa file to ssh dir
  copy:
    src=id_rsa
    dest="~/.ssh/"

- name: git is installed
  apt:
    name=git
    state=present
    update_cache=yes

- name: checkout sites
  git:
    repo="{{ item.repo }}"
    dest="{{ root }}/{{ item.name }}/{{ item.name }}"
    accept_hostkey=yes
    update=yes
    key_file="/home/ubuntu/.ssh/id_rsa"
  when: sites is defined
  with_items:
    sites

- name: remove unused app directories
  file:
    path={{ root }}/{{ item.name }}
    state=absent
  when: disabled is defined
  with_items:
    disabled

- name: virtualenv installed
  pip:
    name=virtualenv
    state=present

- name: libmysqlclient-dev installed
  apt:
    name=libmysqlclient-dev
    state=present

- name: python-dev installed
  apt:
    name=python-dev
    state=present

- name: setup virtualenvs with requirements
  pip:
    virtualenv="{{ root }}/{{ item.name }}"
    requirements="{{ root }}/{{ item.name }}/{{ item.name }}/requirements/py_requirements.txt"
  when: sites is defined
  with_items:
    sites

- name: add a static folder
  file:
    path={{ root }}/{{ item.name }}/static
    state=directory
  when: sites is defined
  with_items:
    sites

- name: collect static files
  django_manage:
    command=collectstatic
    virtualenv={{ root }}/{{ item.name }}
    app_path={{ root }}/{{ item.name }}/{{ item.name }}
  when: sites is defined
  with_items:
    sites

- name: add a media folder
  file:
    path={{ root }}/{{ item.name }}/{{ item.name }}/media
    state=directory
  when: sites is defined
  with_items:
    sites

- name: install gunicorn in virtualenvs
  pip:
    name="gunicorn"
    virtualenv="{{ root }}/{{ item.name }}"
  when: sites is defined
  with_items:
    sites

- name: create gunicorn start script
  template: src=start_gunicorn.j2 dest={{ root }}/{{ item.name }}/bin/start_gunicorn mode=777
  when: sites is defined
  with_items:
    sites

- name: set gunicorn script to executable
  file:
    path={{ root }}/{{ item.name }}/bin/start_gunicorn
    mode="0700"
  when: sites is defined
  with_items:
    sites

- name: create the run folder to store the gunicorn communication sock
  file:
    path={{ root }}/{{ item.name }}/run
    state=directory
  when: sites is defined
  with_items:
    sites

- name: assign permissions to the project folders
  file:
    path={{ root }}/{{ item.name }}
    state=directory
    mode="777"
    recurse=yes
  when: sites is defined
  with_items:
    sites

- name: remove unused supervisor configs
  file:
    path=/etc/supervisor/conf.d/{{ item.name }}.conf
    state=absent
  when: disabled is defined
  with_items:
    disabled

- name: setup supervisor configs
  template:
    src=supervisor.conf.j2
    dest=/etc/supervisor/conf.d/{{ item.name }}.conf
  when: sites is defined
  with_items:
    sites

- name: create supervisor logs folder
  file:
    path={{ root }}/{{ item.name }}/logs
    state=directory
  when: sites is defined
  with_items:
    sites

- name: create supervisor logs file
  command: "touch {{ root }}/{{ item.name }}/logs/gunicorn_supervisor.log"
  args:
    creates: "{{ root }}/{{ item.name }}/logs/gunicorn_supervisor.log"
  when: sites is defined
  with_items:
    sites

- name: supervisor - reread
  command: supervisorctl reread

- name: supervisor - update
  command: supervisorctl update

- name: ensure supervisor is running and reading all confs
  supervisorctl:
    name={{ item.name }}
    state=started
    config=/etc/supervisor/conf.d/{{ item.name }}.conf
  when: sites is defined
  with_items:
    sites

- name: configure nginx confs
  template:
    src=nginx_config.conf.j2
    dest=/etc/nginx/sites-available/nginx_config.conf
  when: sites is defined
  notify: restart nginx

- name: remove nginx config if no sites defined
  file:
    path=/etc/nginx/sites-available/nginx_config.conf
    state=absent
  when: sites is not defined
  notify: restart nginx

- name: remove default nginx config
  file:
    path=/etc/nginx/sites-available/default
    state=absent
  notify: restart nginx

- name: sym-link to sites-enabled
  file:
    src=/etc/nginx/sites-available/nginx_config.conf
    dest=/etc/nginx/sites-enabled/nginx_config.conf
    state=link
  when: sites is defined
  notify: restart nginx

- name: nginx started
  service:
    name=nginx
    state=started